#version 430 compatibility
#extension GL_ARB_compute_shader: enable
#extension GL_ARB_shader_storage_buffer_object: enable
//#extension GL_NV_shader_atomic_float: enable

layout (std140, binding=3) buffer For {
    vec4 fors[];
};
layout (std140, binding=4) buffer Pos {
    vec4 poss[];
};
layout (std140, binding=5) buffer Vel {
    vec4 vels[];
};
layout (std140, binding=6) buffer IO {
    ivec4 bonds[]; //is oxygen, p1, p2
};

layout( local_size_x = 64, local_size_y = 1, local_size_z = 1 ) in;

void main()
{
    const float deg2rad = 0.01745;
    const float _ast = 0.1;

    const float BOND_LENGTH = 1 * _ast;
    const float BOND_ANGLE = 109.47 * deg2rad;
    const float K_LINEAR = 345000; //kJ / mol nm^2
    const float K_RADIAL = 383; //kJ / mol rad^2
    const float dt = 1e-4; //0.1fs

    const float MASS_H = 1.0;
    const float MASS_O = 15.99;

    const float wall = 5;
    const vec3 wall3 = vec3(wall,wall,wall);

    uint gid = gl_GlobalInvocationID.x;
    
    const float mass = mix(MASS_H, MASS_O, bonds[gid].x);

    vec3 fo = fors[gid].xyz;
    vec3 po = poss[gid].xyz;
    vec3 vo = vels[gid].xyz;

    //------------- poss ------------------

    vec3 pn = po + vo*DT + fo*DT*DT/mass/2;
    pn /= wall3;
    pn -= floor(pn);
    pn *= wall3;

    poss[gid].xyz = pn;

    barrier();

    //------------- force -----------------
    
    //vec3 f = vec3(0, 0, 0);
    
    //bonds
    vec3 poso1 = poss[bonds[gid].y].xyz;
    vec3 poso2 = poss[bonds[gid].z].xyz;
    vec3 dir1 = (poso1 - pn) / wall3;
    dir1 -= round(dir1);
    dir1 *= wall3;
    float dst1 = length(dir1);
    vec3 dir2 = (poso2 - pn) / wall3;
    dir2 -= round(dir2);
    dir2 *= wall3;
    float dst2 = length(dir2);
    
    vec3 f = K_LINEAR * normalize(dir) * (dst1 - BOND_LENGTH);
    
    if (bonds.x == 1) {
        force += K_LINEAR * Normalize(dir2) * (dst2 - BOND_LENGTH);
        
        //H <--dir1-- me --dir2--> H
        vec3 t1 = normalize(cross(dir2, dir1));
        vec3 rdir1 = normalize(cross(dir1, t1));
        vec3 rdir2 = normalize(cross(t1, dir2));
        float angle = acos(clamp(dot(normalize(dir1), normalize(dir2)), -1, 1));
        force += (rdir1/dst1 + rdir2/dst2)*K_RADIAL*(angle - BOND_ANGLE);
    }
    else {
        dir1 *= -1;
        dir2 -= dir1;
        //me <--dir1-- O --dir2--> H
        vec3 t1H = normalize(cross(dir2, dir1));
        vec3 rdir = normalize(cross(dir1, t1H));
        float angleH = acos(clamp(dot(normalize(dir1), normalize(dir2)), -1, 1));
        force += (rdir / dst1)*K_RADIAL*(angleH - BOND_ANGLE);
    }
    
    //lennard-jones
    /*
    for (uint i = 0; i < num; i++) {
        if (i != gid) {
            vec3 dp = (pn - poss[i].xyz) / wall3;
            dp -= round(dp);
            dp *= wall3;
            float len = length(dp);
            
            f += dp * 24 * (2 / pow(len, 14) - 1 / pow(len, 8));
        }
    }
    */
    fors[gid].xyz = f;
    
    //------------- velo ------------------

    vec3 vn = vo + (f + fo)*DT/mass/2;

    vels[gid].xyz = vn;
}